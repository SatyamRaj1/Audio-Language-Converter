{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOKuuE9KvEIVv37b191K+Nt"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"Pvmn76Idi5mv"},"outputs":[],"source":["\"\"\"\n","A class to keep:\n","1) the window's raw data\n","2) the window's max(abs(data))\n","\n","To be utilized to later extract the level that was surpassed the x% of the time\n","\"\"\"\n","\n","import math\n","\n","import numpy\n","import pywt\n","\n","\n","class WindowBundle:\n","    def __init__(self, data: numpy, id):\n","        self.id = id\n","        self.data = data\n","        self.rms = None\n","        self.waveletPacket = None\n","        self.noiseWindow = None\n","        self.denoisedData = []\n","\n","        self.dbName = None\n","        self.wlevels = None\n","\n","    def extractWaveletPacket(self, dbName, wlevels):\n","        if self.waveletPacket is not None:\n","            return self.waveletPacket\n","\n","        self.dbName = dbName\n","        self.wlevels = wlevels\n","        self.waveletPacket = pywt.WaveletPacket(\n","            self.data, dbName, 'symmetric', wlevels)\n","\n","        return self.waveletPacket\n","\n","    def getWaveletLeafData(self):\n","        windowWaveletData = list()\n","        leafNodes = [node.path for node in self.waveletPacket.get_level(\n","            self.wlevels, 'freq')]\n","\n","        for node in leafNodes:\n","            bandData = self.waveletPacket[node].data\n","            windowWaveletData.extend(bandData)\n","\n","        return windowWaveletData\n","\n","    def setDenoisedData(self, denoisedData):\n","        self.denoisedData = denoisedData\n","\n","    def getDenoisedData(self):\n","        return self.denoisedData\n","\n","    def setNoiseWindow(self, window):\n","        self.noiseWindow = window\n","\n","    def isBelowThreshold(self, threshold):\n","        if self.getRMS() < threshold:\n","            return True\n","\n","        return False\n","\n","    def getData(self):\n","        return self.data\n","\n","    def getRMS(self):\n","        if self.rms is not None:\n","            return self.rms\n","\n","        squaredSum = numpy.sum(numpy.power(self.data, 2))\n","        self.rms = math.sqrt(squaredSum / len(self.data))\n","\n","        return self.rms\n","\n","    # gets the Mean Absolute\n","    def getMA(self):\n","        _sum = numpy.sum(numpy.abs(self.data))\n","        ma = _sum / len(self.data)\n","\n","        return ma\n","\n","    def getRMSasArray(self):\n","        return self.getRMS() * numpy.ones(len(self.data))\n","\n","    @staticmethod\n","    def joinDenoisedData(windows: list):\n","        result = []\n","        for window in windows:\n","            result.extend(window.denoisedData)\n","\n","        return result\n","\n","    @staticmethod\n","    def joinData(windows: list):\n","        result = []\n","        for window in windows:\n","            result.extend(window.data)\n","\n","        return result\n","\n","    @staticmethod\n","    def joinNoiseData(windows: list):\n","        result = []\n","        for window in windows:\n","            result.extend(window.noiseWindow.data)\n","\n","        return result\n"]}]}